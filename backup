
        # Initialize filtered_favorites_count to avoid reference before assignment
        filtered_favorites_count = 0
        
        # Validate sort parameters to prevent SQL injection
        valid_columns = [
            'entity_id', 'title', 'date_month', 'avg_rank', 'brand', 
            'report_category_id', 'product_inventory_status', 'relative_demand',
            'country_code'
        ]
        valid_directions = ['ASC', 'DESC']
        
        if sort_column not in valid_columns:
            sort_column = 'avg_rank'
        if sort_direction not in valid_directions:
            sort_direction = 'ASC'
        
        # If category filters are provided, get the corresponding google_cat_ids
        category_ids = []
        if categories and len(categories) > 0 or category_filter:
            # Query to get all google_cat_ids for the given level_1 categories
            cat_query = f"""
            SELECT 
                google_cat_id, 
                level_1
            FROM `{cloud_project_id}.transformed_data.google_taxonomy`
            """
            
            cat_where_clauses = []
            if categories and len(categories) > 0:
                category_list = ", ".join([f"'{cat}'" for cat in categories])
                cat_where_clauses.append(f"level_1 IN ({category_list})")
            elif category_filter:
                cat_where_clauses.append(f"level_1 = '{category_filter}'")
                
            if cat_where_clauses:
                cat_query += " WHERE " + " AND ".join(cat_where_clauses)
                
            cat_query_job = bigquery_client.query(cat_query)
            cat_results = cat_query_job.result()
            
            # Extract all matching google_cat_ids
            for row in cat_results:
                category_ids.append(row.google_cat_id)
        
        # Build base filter conditions for all queries
        where_clauses = []
        
        # Add title filter if provided (case-insensitive contains search)
        if title_filter and title_filter.strip():
            # Escape single quotes in the title filter
            safe_title_filter = title_filter.strip().replace("'", "''")
            where_clauses.append(f"LOWER(title) LIKE '%{safe_title_filter.lower()}%'")
        
        if dates and len(dates) > 0:
            date_list = ", ".join([f"'{date}'" for date in dates])
            where_clauses.append(f"date_month IN ({date_list})")
        elif date_filter:
            where_clauses.append(f"date_month = '{date_filter}'")
            
        if brands and len(brands) > 0:
            brand_list = ", ".join([f"'{brand}'" for brand in brands])
            where_clauses.append(f"brand IN ({brand_list})")
        elif brand_filter:
            where_clauses.append(f"brand = '{brand_filter}'")
            
        # Add country filter if countries are provided
        if countries and len(countries) > 0:
            country_list = ", ".join([f"'{country}'" for country in countries])
            where_clauses.append(f"country_code IN ({country_list})")
        
        # Add category filter if category_ids were found
        if category_ids:
            # Convert string category IDs to integers before using them in the query
            int_category_ids = []
            for cat_id in category_ids:
                try:
                    int_category_ids.append(int(cat_id))
                except ValueError:
                    # Skip any category IDs that can't be converted to integers
                    print(f"Warning: Could not convert category ID '{cat_id}' to integer")
            
            if int_category_ids:
                # Use integers directly without quotes
                cat_id_list = ", ".join(str(cat_id) for cat_id in int_category_ids)
                where_clauses.append(f"report_category_id IN ({cat_id_list})")
        
        # Get user favorites for filtering
        user_favorites = []
        if favorites_only or list_id:
            # Get favorites if needed
            if favorites_only:
                user_ref = firestore_client.collection('users').document(current_user)
                user_doc = user_ref.get()
                
                if user_doc.exists:
                    user_data = user_doc.to_dict()
                    user_favorites = user_data.get('favorites', [])
                
                if user_favorites:
                    favorites_list = ", ".join([f"'{fav}'" for fav in user_favorites])
                    where_clauses.append(f"entity_id IN ({favorites_list})")
            
            # Get list items if needed
            elif list_id:
                list_ref = firestore_client.collection('user_product_lists').document(list_id)
                list_doc = list_ref.get()
                
                if list_doc.exists:
                    list_data = list_doc.to_dict()
                    
                    # Verify user has access to this list
                    if list_data.get("owner") == current_user or current_user in list_data.get("shared_with", []):
                        list_products = list_data.get('products', [])
                        
                        if list_products:
                            list_products_list = ", ".join([f"'{prod}'" for prod in list_products])
                            where_clauses.append(f"entity_id IN ({list_products_list})")
                        else:
                            # If list is empty, make sure no results are returned
                            where_clauses.append("1 = 0")
                    else:
                        # If user doesn't have access, make sure no results are returned
                        where_clauses.append("1 = 0")
                else:
                    # If list doesn't exist, make sure no results are returned
                    where_clauses.append("1 = 0")
        
        # Helper function to add inventory and demand filters to a query
        def add_inventory_demand_filters(base_query, has_where_clause):
            query = base_query
            
            # Add inventory status filter if provided
            if inventory_statuses and len(inventory_statuses) > 0:
                inventory_list = ", ".join([f"'{status}'" for status in inventory_statuses])
                if has_where_clause:
                    query += f" AND product_inventory_status IN ({inventory_list})"
                else:
                    query += f" WHERE product_inventory_status IN ({inventory_list})"
                    has_where_clause = True
                    
            # Add demand filter if provided
            if demand_values and len(demand_values) > 0:
                demand_list = ", ".join([f"'{demand}'" for demand in demand_values])
                if has_where_clause:
                    query += f" AND relative_demand IN ({demand_list})"
                else:
                    query += f" WHERE relative_demand IN ({demand_list})"
            
            return query

        # First, prepare base conditions for multi-date query if needed
        if dates and len(dates) > 1:
            # Build base conditions for the WITH clause
            base_conditions = []
            if where_clauses:
                # Copy the where clauses but remove any date-related ones since we handle those separately
                for clause in where_clauses:
                    if not clause.startswith("date_month"):
                        base_conditions.append(clause)
            
            # Initialize base_conditions_str
            base_conditions_str = ""
            
            # Apply inventory and demand filters to base conditions
            inventory_demand_conditions = []
            
            
            # Add inventory status filter
            if inventory_statuses and len(inventory_statuses) > 0:
                inventory_list = ", ".join([f"'{status}'" for status in inventory_statuses])
                inventory_demand_conditions.append(f"product_inventory_status IN ({inventory_list})")
            
            # Add demand filter
            if demand_values and len(demand_values) > 0:
                demand_list = ", ".join([f"'{demand}'" for demand in demand_values])
                inventory_demand_conditions.append(f"relative_demand IN ({demand_list})")
            
            # Create version of base_conditions with different table aliases
            if inventory_demand_conditions:
                if base_conditions:
                    # Create base conditions with different table aliases
                    pp_base_conditions = []
                    p_base_conditions = []
                    
                    for condition in base_conditions:
                        if "entity_id" in condition:
                            pp_base_conditions.append(condition.replace("entity_id", "pp.entity_id"))
                            p_base_conditions.append(condition.replace("entity_id", "p.entity_id"))
                        else:
                            pp_base_conditions.append(condition)
                            p_base_conditions.append(condition)
                    
                    # Create inventory demand conditions with different table aliases
                    pp_inventory_demand = []
                    p_inventory_demand = []
                    
                    for condition in inventory_demand_conditions:
                        if "product_inventory_status" in condition:
                            pp_inventory_demand.append(condition.replace("product_inventory_status", "pp.product_inventory_status"))
                            p_inventory_demand.append(condition.replace("product_inventory_status", "p.product_inventory_status"))
                        elif "relative_demand" in condition:
                            pp_inventory_demand.append(condition.replace("relative_demand", "pp.relative_demand"))
                            p_inventory_demand.append(condition.replace("relative_demand", "p.relative_demand"))
                        else:
                            pp_inventory_demand.append(condition)
                            p_inventory_demand.append(condition)
                    
                    # Create the qualified condition strings
                    pp_base_conditions_str = f"AND {' AND '.join(pp_base_conditions)} AND {' AND '.join(pp_inventory_demand)}"
                    p_base_conditions_str = f"AND {' AND '.join(p_base_conditions)} AND {' AND '.join(p_inventory_demand)}"
                    
                    # Also create the unqualified version for backward compatibility
                    base_conditions_str = f"AND {' AND '.join(base_conditions)} AND {' AND '.join(inventory_demand_conditions)}"
                else:
                    # Create inventory demand conditions with different table aliases
                    pp_inventory_demand = []
                    p_inventory_demand = []
                    
                    for condition in inventory_demand_conditions:
                        if "product_inventory_status" in condition:
                            pp_inventory_demand.append(condition.replace("product_inventory_status", "pp.product_inventory_status"))
                            p_inventory_demand.append(condition.replace("product_inventory_status", "p.product_inventory_status"))
                        elif "relative_demand" in condition:
                            pp_inventory_demand.append(condition.replace("relative_demand", "pp.relative_demand"))
                            p_inventory_demand.append(condition.replace("relative_demand", "p.relative_demand"))
                        else:
                            pp_inventory_demand.append(condition)
                            p_inventory_demand.append(condition)
                    
                    # Create the qualified condition strings
                    pp_base_conditions_str = f"AND {' AND '.join(pp_inventory_demand)}"
                    p_base_conditions_str = f"AND {' AND '.join(p_inventory_demand)}"
                    
                    # Also create the unqualified version for backward compatibility
                    base_conditions_str = f"AND {' AND '.join(inventory_demand_conditions)}"
            elif base_conditions:
                # Create base conditions with different table aliases
                pp_base_conditions = []
                p_base_conditions = []
                
                for condition in base_conditions:
                    if "entity_id" in condition:
                        pp_base_conditions.append(condition.replace("entity_id", "pp.entity_id"))
                        p_base_conditions.append(condition.replace("entity_id", "p.entity_id"))
                    else:
                        pp_base_conditions.append(condition)
                        p_base_conditions.append(condition)
                
                # Create the qualified condition strings
                pp_base_conditions_str = f"AND {' AND '.join(pp_base_conditions)}"
                p_base_conditions_str = f"AND {' AND '.join(p_base_conditions)}"
                
                # Also create the unqualified version for backward compatibility
                base_conditions_str = f"AND {' AND '.join(base_conditions)}"
            else:
                # No conditions, set all to empty strings
                pp_base_conditions_str = ""
                p_base_conditions_str = ""
                base_conditions_str = ""
        
        # Now build the stats query
        if dates and len(dates) > 1:
            # For multi-date queries, we need to count products based on the time period mode
            if time_period_mode == 'strict':
                # Strict mode: only count products that appear in ALL selected dates
                stats_query = f"""
                WITH product_dates AS (
                    SELECT
                        pp.entity_id,
                        COUNT(DISTINCT pp.date_month) as date_count
                    FROM `{cloud_project_id}.transformed_data.popular_products_monthly` pp
                    WHERE pp.date_month IN ({", ".join([f"'{date}'" for date in dates])})
                    {pp_base_conditions_str}
                    GROUP BY pp.entity_id
                    HAVING date_count = {len(dates)}  -- Only include products that appear in ALL selected dates
                )
                SELECT 
                    COUNT(DISTINCT pd.entity_id) as total_count,
                    COUNT(DISTINCT p.brand) as unique_brands_count
                FROM product_dates pd
                JOIN `{cloud_project_id}.transformed_data.popular_products_monthly` p ON pd.entity_id = p.entity_id
                WHERE p.date_month IN ({", ".join([f"'{date}'" for date in dates])})
                {p_base_conditions_str}
                """
            else:
                # Relaxed mode: count products that appear in AT LEAST ONE of the selected dates
                stats_query = f"""
                WITH product_dates AS (
                    SELECT
                        pp.entity_id,
                        COUNT(DISTINCT pp.date_month) as date_count
                    FROM `{cloud_project_id}.transformed_data.popular_products_monthly` pp
                    WHERE pp.date_month IN ({", ".join([f"'{date}'" for date in dates])})
                    {pp_base_conditions_str}
                    GROUP BY pp.entity_id
                    HAVING date_count >= 1  -- Include products that appear in AT LEAST ONE selected date
                )
                SELECT 
                    COUNT(DISTINCT pd.entity_id) as total_count,
                    COUNT(DISTINCT p.brand) as unique_brands_count
                FROM product_dates pd
                JOIN `{cloud_project_id}.transformed_data.popular_products_monthly` p ON pd.entity_id = p.entity_id
                WHERE p.date_month IN ({", ".join([f"'{date}'" for date in dates])})
                {p_base_conditions_str}
                """
        else:
            stats_query = f"""
            SELECT 
                COUNT(*) as total_count,
                COUNT(DISTINCT brand) as unique_brands_count
            FROM `{cloud_project_id}.transformed_data.popular_products_monthly`
            """
            
            if where_clauses:
                stats_query += " WHERE " + " AND ".join(where_clauses)
                
            stats_query = add_inventory_demand_filters(stats_query, bool(where_clauses))
        
        # Execute the stats query
        stats_query_job = bigquery_client.query(stats_query)
        stats_result = stats_query_job.result()
        total_count = 0
        unique_brands_count = 0
        
        # Get the count values from the result
        for row in stats_result:
            total_count = row.total_count
            unique_brands_count = row.unique_brands_count
            break
            
        # Get user favorites for the filtered products
        # First, get all user's favorites
        user_ref = firestore_client.collection('users').document(current_user)
        user_doc = user_ref.get()
        
        user_favorites = []
        if user_doc.exists:
            user_data = user_doc.to_dict()
            user_favorites = user_data.get('favorites', [])
        
        # Update the favorites count query for multi-date case
        if dates and len(dates) > 1:
            if not user_favorites:
                filtered_favorites_count = 0
            else:
                # Add the user favorites filter
                favorites_list = ", ".join([f"'{fav}'" for fav in user_favorites])
                if time_period_mode == 'strict':
                    filtered_favorites_query = f"""
                    WITH product_dates AS (
                        SELECT
                            pp.entity_id,
                            COUNT(DISTINCT pp.date_month) as date_count
                        FROM `{cloud_project_id}.transformed_data.popular_products_monthly` pp
                        WHERE pp.date_month IN ({", ".join([f"'{date}'" for date in dates])})
                        {pp_base_conditions_str}
                        GROUP BY pp.entity_id
                        HAVING date_count = {len(dates)}  -- Only include products that appear in ALL selected dates
                    )
                    SELECT 
                        COUNT(DISTINCT pd.entity_id) as favorites_count
                    FROM product_dates pd
                    WHERE pd.entity_id IN ({favorites_list})
                    """
                else:
                    filtered_favorites_query = f"""
                    WITH product_dates AS (
                        SELECT
                            pp.entity_id,
                            COUNT(DISTINCT pp.date_month) as date_count
                        FROM `{cloud_project_id}.transformed_data.popular_products_monthly` pp
                        WHERE pp.date_month IN ({", ".join([f"'{date}'" for date in dates])})
                        {pp_base_conditions_str}
                        GROUP BY pp.entity_id
                        HAVING date_count >= 1  -- Include products that appear in AT LEAST ONE selected date
                    )
                    SELECT 
                        COUNT(DISTINCT pd.entity_id) as favorites_count
                    FROM product_dates pd
                    WHERE pd.entity_id IN ({favorites_list})
                    """
                
                # Execute the favorites count query
                favorites_query_job = bigquery_client.query(filtered_favorites_query)
                favorites_result = favorites_query_job.result()
                
                filtered_favorites_count = 0
                for row in favorites_result:
                    filtered_favorites_count = row.favorites_count
                    break
        
        # Now build the actual data query for products
        # If multiple dates are selected, we need to use a different query to group results
        if dates and len(dates) > 1:
            # Use a subquery to filter products based on the time period mode
            if time_period_mode == 'strict':
                # Strict mode: only include products that appear in ALL selected dates
                query = f"""
                WITH product_dates AS (
                    SELECT
                        pp.entity_id,
                        COUNT(DISTINCT pp.date_month) as date_count
                    FROM `{cloud_project_id}.transformed_data.popular_products_monthly` pp
                    WHERE pp.date_month IN ({", ".join([f"'{date}'" for date in dates])})
                    {pp_base_conditions_str}
                    GROUP BY pp.entity_id
                    HAVING date_count = {len(dates)}  -- Only include products that appear in ALL selected dates
                ),
                latest_data AS (
                    SELECT
                        p.*,
                        ROW_NUMBER() OVER(PARTITION BY p.entity_id ORDER BY p.date_month DESC) as row_num
                    FROM `{cloud_project_id}.transformed_data.popular_products_monthly` p
                    INNER JOIN product_dates pd ON p.entity_id = pd.entity_id
                    WHERE p.date_month IN ({", ".join([f"'{date}'" for date in dates])})
                    {p_base_conditions_str}
                ),
                avg_ranks AS (
                    SELECT
                        pp.entity_id,
                        AVG(pp.avg_rank) as calculated_avg_rank
                    FROM `{cloud_project_id}.transformed_data.popular_products_monthly` pp
                    WHERE pp.entity_id IN (SELECT pd.entity_id FROM product_dates pd)
                    AND pp.date_month IN ({", ".join([f"'{date}'" for date in dates])})
                    {pp_base_conditions_str}
                    GROUP BY pp.entity_id
                )
                SELECT 
                    ld.report_category_id,
                    ld.entity_id,
                    ld.title,
                    NULL as date_month,  -- Set to NULL since we're aggregating across dates
                    ar.calculated_avg_rank as avg_rank,
                    ld.brand,
                    ld.product_inventory_status,
                    ld.brand_inventory_status,
                    ld.relative_demand,
                    ld.min_price_micros,
                    ld.max_price_micros,
                    ld.country_code
                FROM latest_data ld
                JOIN avg_ranks ar ON ld.entity_id = ar.entity_id
                WHERE ld.row_num = 1  -- Take only the latest record for each product
                """
            else:
                # Relaxed mode: include products that appear in AT LEAST ONE of the selected dates
                query = f"""
                WITH product_dates AS (
                    SELECT
                        pp.entity_id,
                        COUNT(DISTINCT pp.date_month) as date_count
                    FROM `{cloud_project_id}.transformed_data.popular_products_monthly` pp
                    WHERE pp.date_month IN ({", ".join([f"'{date}'" for date in dates])})
                    {pp_base_conditions_str}
                    GROUP BY pp.entity_id
                    HAVING date_count >= 1  -- Include products that appear in AT LEAST ONE selected date
                ),
                latest_data AS (
                    SELECT
                        p.*,
                        ROW_NUMBER() OVER(PARTITION BY p.entity_id ORDER BY p.date_month DESC) as row_num
                    FROM `{cloud_project_id}.transformed_data.popular_products_monthly` p
                    INNER JOIN product_dates pd ON p.entity_id = pd.entity_id
                    WHERE p.date_month IN ({", ".join([f"'{date}'" for date in dates])})
                    {p_base_conditions_str}
                ),
                avg_ranks AS (
                    SELECT
                        pp.entity_id,
                        AVG(pp.avg_rank) as calculated_avg_rank
                    FROM `{cloud_project_id}.transformed_data.popular_products_monthly` pp
                    WHERE pp.entity_id IN (SELECT pd.entity_id FROM product_dates pd)
                    AND pp.date_month IN ({", ".join([f"'{date}'" for date in dates])})
                    {pp_base_conditions_str}
                    GROUP BY pp.entity_id
                )
                SELECT 
                    ld.report_category_id,
                    ld.entity_id,
                    ld.title,
                    NULL as date_month,  -- Set to NULL since we're aggregating across dates
                    ar.calculated_avg_rank as avg_rank,
                    ld.brand,
                    ld.product_inventory_status,
                    ld.brand_inventory_status,
                    ld.relative_demand,
                    ld.min_price_micros,
                    ld.max_price_micros,
                    ld.country_code
                FROM latest_data ld
                JOIN avg_ranks ar ON ld.entity_id = ar.entity_id
                WHERE ld.row_num = 1  -- Take only the latest record for each product
                """
            
            # We've already handled inventory and demand filters in the base_conditions_str
            # No need to call add_inventory_demand_filters
        else:
            # Original query for single date
            query = f"""
            SELECT 
                report_category_id,
                entity_id,
                title,
                date_month,
                avg_rank,
                brand,
                product_inventory_status,
                brand_inventory_status,
                relative_demand,
                min_price_micros,
                max_price_micros,
                country_code
            FROM `{cloud_project_id}.transformed_data.popular_products_monthly`
            """
            
            if where_clauses:
                query += " WHERE " + " AND ".join(where_clauses)
                
            query = add_inventory_demand_filters(query, bool(where_clauses))
        
        # Add order by clause - for multi-date query, we need special handling
        if dates and len(dates) > 1:
            if sort_column == 'avg_rank':
                query += f" ORDER BY calculated_avg_rank {sort_direction}"
            elif sort_column == 'date_month':
                # Skip date sorting for multi-date as it's NULL
                query += f" ORDER BY calculated_avg_rank ASC"
            elif sort_column in ['title', 'brand', 'report_category_id', 'country_code', 'product_inventory_status', 'relative_demand']:
                # These columns exist in the result set
                query += f" ORDER BY ld.{sort_column} {sort_direction}"
            else:
                # Default to sorting by the calculated average rank
                query += f" ORDER BY calculated_avg_rank ASC"
        else:
            query += f" ORDER BY {sort_column} {sort_direction}"
        
        # Add limit and offset
        query += f" LIMIT {limit} OFFSET {offset}"
            
        #print(query)
        
        # Execute the query
        query_job = bigquery_client.query(query)
        results = query_job.result()
        
        # Convert to list of dictionaries
        products = []
        for row in results:
            product = {
                "report_category_id": row.report_category_id,
                "entity_id": row.entity_id,
                "title": row.title,
                "date_month": row.date_month.isoformat() if row.date_month else None,
                "avg_rank": row.avg_rank,
                "brand": row.brand,
                "product_inventory_status": row.product_inventory_status,
                "brand_inventory_status": row.brand_inventory_status,
                "relative_demand": row.relative_demand,
                "min_price_micros": row.min_price_micros,
                "max_price_micros": row.max_price_micros,
                "country_code": row.country_code
            }
            products.append(product)
        
        # Handle favorites count for single date case if not already handled
        if dates and len(dates) <= 1 and not user_favorites:
            filtered_favorites_count = 0
        elif dates and len(dates) <= 1:
            # Count how many filtered favorites match user's favorites for single date
            filtered_favorites_query = f"""
            SELECT COUNT(DISTINCT entity_id) as favorites_count
            FROM `{cloud_project_id}.transformed_data.popular_products_monthly`
            """
            
            # Add the base filters
            has_where = False
            if where_clauses:
                filtered_favorites_query += " WHERE " + " AND ".join(where_clauses)
                has_where = True
            
            # Add inventory and demand filters
            filtered_favorites_query = add_inventory_demand_filters(filtered_favorites_query, has_where)
            
            # Add the user favorites filter
            favorites_list = ", ".join([f"'{fav}'" for fav in user_favorites])
            if has_where or inventory_statuses or demand_values:
                filtered_favorites_query += f" AND entity_id IN ({favorites_list})"
            else:
                filtered_favorites_query += f" WHERE entity_id IN ({favorites_list})"
            
            # Execute the favorites count query
            favorites_query_job = bigquery_client.query(filtered_favorites_query)
            favorites_result = favorites_query_job.result()
            
            filtered_favorites_count = 0
            for row in favorites_result:
                filtered_favorites_count = row.favorites_count
                break